var documenterSearchIndex = {"docs":
[{"location":"index.html#","page":"Home","title":"Home","text":"CurrentModule = SymbolServer","category":"page"},{"location":"index.html#SymbolServer-1","page":"Home","title":"SymbolServer","text":"","category":"section"},{"location":"index.html#","page":"Home","title":"Home","text":"(Image: Dev) (Image: Project Status: Active â€“ The project has reached a stable, usable state and is being actively developed.) (Image: ) (Image: codecov.io)","category":"page"},{"location":"index.html#","page":"Home","title":"Home","text":"SymbolServer is a helper package for LanguageServer.jl that provides information about internal and exported variables of packages (without loading them). A package's symbol information is initially loaded in an external process but then stored on disc for (quick loading) future use.","category":"page"},{"location":"index.html#Installation-and-Usage-1","page":"Home","title":"Installation and Usage","text":"","category":"section"},{"location":"index.html#","page":"Home","title":"Home","text":"using Pkg\nPkg.add(\"SymbolServer\")","category":"page"},{"location":"index.html#","page":"Home","title":"Home","text":"using SymbolServer","category":"page"},{"location":"index.html#","page":"Home","title":"Home","text":"Documentation: (Image: Dev)","category":"page"},{"location":"index.html#","page":"Home","title":"Home","text":"Documentation for working with Julia environments is available here.","category":"page"},{"location":"index.html#API-1","page":"Home","title":"API","text":"","category":"section"},{"location":"index.html#","page":"Home","title":"Home","text":"SymbolServerInstance(path_to_depot, path_to_store)","category":"page"},{"location":"index.html#","page":"Home","title":"Home","text":"Creates a new symbol server instance that works on a given Julia depot. This symbol server instance can be long lived, i.e. one can re-use it for different environments etc. If path_to_store is specified, cache files will be stored there, otherwise a standard location will be used.","category":"page"},{"location":"index.html#","page":"Home","title":"Home","text":"getstore(ssi::SymbolServerInstance, environment_path::AbstractString)","category":"page"},{"location":"index.html#","page":"Home","title":"Home","text":"Loads the symbols for the environment in environment_path. Returns a tuple, where the first element is a return status and the second element a payload. The status can be :success (in which case the second element is the new store), :canceled if another call to getstore was initiated before a previous one finished (with nothing as the payload), or :failure with the payload being the content of the error stream of the client process.","category":"page"},{"location":"index.html#","page":"Home","title":"Home","text":"This function is long running and should typically be called in an @async block.","category":"page"},{"location":"syntax.html#Syntax-Reference-1","page":"Syntax Reference","title":"Syntax Reference","text":"","category":"section"},{"location":"syntax.html#","page":"Syntax Reference","title":"Syntax Reference","text":"Modules = [SymbolServer]\nPages   = [\"syntax.md\"]","category":"page"},{"location":"syntax.html#","page":"Syntax Reference","title":"Syntax Reference","text":"Modules = [SymbolServer]","category":"page"},{"location":"syntax.html#SymbolServer.isinmanifest","page":"Syntax Reference","title":"SymbolServer.isinmanifest","text":"isinmanifest(context, package::Union{String,UUID})\n\nChecks whether a package is in the manifest of a given context, e.g. is either directly loadable or is a dependency of an loadable package.\n\n\n\n\n\n","category":"function"},{"location":"syntax.html#SymbolServer.isinproject","page":"Syntax Reference","title":"SymbolServer.isinproject","text":"isinproject(context, package::Union{String,UUID})\n\nChecks whether a package is in the dependencies of a given context, e.g. is directly loadable.\n\n\n\n\n\n","category":"function"},{"location":"syntax.html#SymbolServer.load_package_from_cache_into_store!-Tuple{SymbolServerInstance,Any,Any,Any}","page":"Syntax Reference","title":"SymbolServer.load_package_from_cache_into_store!","text":"load_package_from_cache_into_store!(ssp::SymbolServerInstance, uuid, store)\n\nTries to load the on-disc stored cache for a package (uuid). Attempts to generate (and save to disc) a new cache if the file does not exist or is unopenable.\n\n\n\n\n\n","category":"method"},{"location":"syntax.html#SymbolServer.manifest-Tuple{Pkg.Types.Context}","page":"Syntax Reference","title":"SymbolServer.manifest","text":"manifest(c::Pkg.Types.Context)\n\nRetrieves the manifest of a Context.\n\n\n\n\n\n","category":"method"},{"location":"syntax.html#SymbolServer.project-Tuple{Pkg.Types.Context}","page":"Syntax Reference","title":"SymbolServer.project","text":"project(c::Pkg.Types.Context)\n\nRetrieves the project of a Context.\n\n\n\n\n\n","category":"method"}]
}
